# -*- coding: utf-8 -*-
"""hw1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pMYzsR4v5Qay7zG22ZBcuki9Xx6BgOt7
"""

def get_letter_grade(number_grade):             #defining a function
  if number_grade >= 90:                        #applying condition
    return "A"
  elif number_grade >= 80:                      #if not then apply next condition
    return "B"
  elif number_grade >= 70:
    return "C"
  elif number_grade >= 60:
    return "D"
  else:                                         #for everything else value apart from values above
    return "F"

# To test the function
number_grade = 75
letter_grade = get_letter_grade(number_grade)
print(letter_grade)

# Assert statement to test the function         SURAJ JADHAV 9/10/23 Q1

assert get_letter_grade(95) == "A"
assert get_letter_grade(80) == "B"
assert get_letter_grade(75) == "C"
assert get_letter_grade(60) == "D"
assert get_letter_grade(40) == "F"

def checkWord(sentence):                                #defining a function
 if 'Lamar' in sentence:                                #applying condition
     return "Lamer is a great school"
# read sentence                                         #SURAJ JADHAV 9/10/23 Q2
sentence = input("Enter sentence : ")
print(checkWord(sentence))

def sum_of_numbers():              #defining a function
  total = 0                        # Initialize a variable to store the sum by giving initial value 0
  for i in range(1, 101):          # for loop, 1 to 101 because python does not include last number in range
    total += i                     # for updating the value of the total variable by adding the current value of number to it
  return total                     #SURAJ JADHAV 9/10/23 Q3

# Print the sum of the numbers
print(sum_of_numbers())

numbers = [70, 12, 51, 34, 81]                     #Create a list of numbers

# Sort the list using the sort function
numbers.sort()                                     #used in built sort function
print("Sorted list using sort function:", numbers) #numbers were sorted and printed

# Sort the list using a simple selection sort
def selection_sort(numbers):                       #SURAJ JADHAV 9/10/23 Q4
  for i in range(len(numbers)):                    #apply for loop for range that has a sequence of numbers as lenth counts number of elements in range
    min_index = i                                  #Find the minimum element in the remaining unsorted list
    for j in range(i + 1, len(numbers)):           #generates a sequence of numbers that represents the indices of the remaining unsorted portion of the list
      if numbers[j] < numbers[min_index]:          #checks if current number is less than min. number found
        min_index = j                              #update to show smaller number is

    numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # Swap the found minimum element with the element at index i

selection_sort(numbers)
print("Sorted list using selection sort:", numbers)

import random
print("Welcome to the guessing game!")
# Get the maximum number from user
max_number = int(input("Enter the maximum number: "))                                       #integer is taken

# Generate a random target number
target_number = random.randint(1, max_number)                                               #random integer is generated between 1 and input number earlier


# Start the game                                                                            #SURAJ JADHAV 9/10/23 Q5
while True:
    # Get user's guess
    user_guess = int(input("Guess the number (between 1 and {}): ".format(max_number)))     #max number is used in place of {} because of format
    # Check if the guess is correct
    if user_guess == target_number:
        print("Hurray! You guessed the correct number {}.".format(target_number))           #target number is used in place of {} because of format
        break                                                                               #breaks the loop if user guessed correct number
    elif user_guess < target_number:                                                        #condition applied if user number less than correct number and hint given
        print("Try a higher number.")
    else:                                                                                   #condition applied if user number more than correct number and hint given
        print("Try a lower number.")

from math import pi                          #imported value of pi

def volume_of_sphere(radius):                #defined function
    return radius**3*pi*4/3                  #used formula

print(volume_of_sphere(5))                   #print using radius 5

# Test the function                          #SURAJ JADHAV 9/10/23 Q6
radius = 5
volume = volume_of_sphere(radius)
assert volume == 523.5987755982989          #assert matches the output and no assertion error

# Create a string with "S" and "J" using asterisks in a pattern
pattern = """
*******        ***********
*                   *
*                   *
*******             *
      *             *
      *             *
      *             *
*******      ********
"""
print(pattern)                       #SURAJ JADHAV 9/10/23 Q7

def descriptive(my_number_list):                                    #defining function
  print("The average is=",sum(my_number_list)/len(my_number_list))  #used average formula
  print("The minimum is =",min(my_number_list))                     #used min function on list
  print("The maximum is=",max(my_number_list))
                                                                    #SURAJ JADHAV 9/10/23 Q8
x=[]                                                                #blank list
number_in_list=int(input("Enter total number in list "))            #total numbers in list
for i in range(number_in_list):
  x.append(int(input("Enter the number value=")))                   #adding values to x
print("The list is",x)
descriptive(x)

def check_prime(random_number):                                #defining function
  for i in range (2, round(random_number**.5)+1):
    if random_number % i==0:                                   #if remainder 0 then not prime
      return False
  return True                                                  #else prime

assert check_prime(6)==False, "Test failed on value 6"         #assertion to check prime
assert check_prime(26)==False, "Test failed on value 26"
assert check_prime(7)==True

def find_primes(max_limit):                                    #defining function to find primes
  prime_list=[]                                                #empty list
  for i in range(2,max_limit):                                 #list starts with 2 to max limit
    if check_prime(i)== True:                                  #using assertion to check prime
      prime_list.append(i)                                     #number added in list
  return prime_list

x=find_primes(200)
print(x)                                                       #SURAJ JADHAV 9/10/23 Q9

def findGCD(a, b):                               #function to find Greatest Common Divisor
 if (a<0 or b<0 ):                               #check if number a or b is negative
   print ("invalid input")                       #if yes then error message
   return


 if a > b:                                       #finding smaller number between a and b
   small = b

 else:
    small = a


 for i in range(1, small + 1):                   #looping from 1 to smaller number

    if((a % i == 0) and (b % i == 0)):           #if the current number divides both a and b
      gcd = i                                    #update the gcd to i


 print (f"The gcd of {a} and {b} is: {gcd} ")    #SURAJ JADHAV 9/10/23 Q10
 return

def main():

 a=int (input("Enter a positive number :"))      #asking for user input
 b=int (input ("Enter another positive number :"))

 findGCD(a,b)

if __name__=="__main__":
  main()